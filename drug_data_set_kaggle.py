# -*- coding: utf-8 -*-
"""Drug data set kaggle

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p92K0osZLfw-54SeCpe4OrNTMSVKAWWx

## IMPORTING DATA SET
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/drug_recovery.csv")
df

"""## CLEANING THE RAW DATA """

df['city']=df['city'].apply(lambda x : x.lower())
df['gender']=df['gender'].apply(lambda x : x.lower())
df.nunique()

"""## BASIC MATRICES"""

df.shape

df.info()

df.nunique(axis=0)

"""## PERCENTAGE NULL VALUE AND HANDLLING NULL VALUE"""

percent_missing = df.isnull().sum() * 100 / len(df)
missing_value_df = pd.DataFrame({'column_name': df.columns,
                                 'percent_missing (%)': percent_missing})
missing_value_df.reset_index(drop="index")

"""MISSING VALUE FOR AGE IS <1 % SO LET DROP THE DATA"""

df.dropna(inplace=True)
df.reset_index(drop="index")

"""## DESCRIPTION OF CLEAN DATA"""

df.shape

df.info()

df.nunique(axis=0)

df.iloc[:, 1:].describe(include='all')

"""## OUTLIER DETECTION"""

num_cols=['age','bmi','sleep','days']
fig=plt.figure(figsize=(16,16))
j=1
for i in num_cols:
  plt.subplot(2,2,j)
  sns.boxplot(data=df,x=df[i])
  plt.title("outlier detection {}".format(i))
  j+=1
plt.suptitle("Outlier detection of Numaric feature")
plt.show()

"""# looks like age and days of recovery has the outlier so need to treat them

## TREATMENT OF OUTLIERS BY IQR METHOD
"""

num_cols=['age','bmi','sleep','days']

Q1 = df[num_cols].quantile(0.25)
Q3 = df[num_cols].quantile(0.75)

IQR = Q3 - Q1
Q1

num_cols=['age','bmi','sleep','days']
fig=plt.figure(figsize=(16,16))
index=1
for i in num_cols:
  Q1 = df[i].quantile(0.25)
  Q3 = df[i].quantile(0.75)
  IQR = Q3 - Q1
 
  df[i]=df[i].map(lambda x:(Q1-1.5*IQR) if x<(Q1-1.5*IQR) else x).map(lambda x:(Q3+1.5*IQR) if x>(Q3+1.5*IQR) else x)
  plt.subplot(2,2,index)
  sns.boxplot(x=df[i])
  plt.title("outlier after treatment of {}".format(i))
  index += 1
fig.suptitle("After treating the outliers",size=20)
plt.show()

"""## UNIVARIATE ANALYSIS"""

df_population_sample=df.groupby("city")["gender"].count().to_frame().reset_index().rename(columns={"gender":"sample_population"})
df_population_sample

plt.figure(figsize=(5,5))
plt.pie(x=df_population_sample["sample_population"],
colors=['Green','orange'],
labels=["banglore","mumbai"],
autopct='%1.2f%%',
startangle=90,
explode=[0.0,0.1],
shadow=True)
plt.title('City wise population distribution',size=20)
plt.legend(loc="upper right")
plt.show()

df_gender_sample=df.groupby("gender")["city"].count().to_frame().reset_index().rename(columns={"city":"sample_population"})
df_gender_sample

plt.figure(figsize=(5,5))
plt.pie(x=df_gender_sample["sample_population"],
colors=['Green','orange'],
labels=["female","male"],
autopct='%1.2f%%',
startangle=90,
explode=[0.0,0.1],
shadow=True)
plt.title('Gender wise population distribution',size=20)
plt.legend(loc="upper right")
plt.show()

num_cols=['age','bmi','sleep','days']
j=1
plt.figure(figsize=(16,16))
for i in num_cols:
  plt.subplot(2,2,j)
  sns.histplot(data=df,x=df[i],bins=50,kde=True)
  plt.title("Distribution of {}".format(i))
  j+=1
plt.suptitle("Distribution of NUmarical Data",size=20)
plt.show()

"""looks like recovery day of the drugs center around 16 days

## BIVARIATE ANLYSIS
"""

plt.figure(figsize=(15,5))
num_cols=['age','bmi','sleep']
j=1
for i in num_cols:
  plt.subplot(1,3,j)
  sns.scatterplot(data=df, x='days', y=i)
  plt.title("{} vs days".format(i))
  j+=1
plt.suptitle("BIVARIATE ANALYSIS",size=20)
plt.show()

"""looks like age and bmi dose not have any significant effect on recovery days but
person who sleeps around 6.5 to 8 hours recover early

## To proof that day of recovery depends on city,gender,age,bmi,sleep let perform Hypothisis testing

# *HYPOTHISIS TESTING*

## City has any significant role or not in the recovery of Patient
"""

sns.boxplot(data=df,x='city',y="days")
plt.show()

"""looks like bangalore city has higher days of recover time to stistically prooven the the statement let perform TTest

* H0 : there is no diffrence in the mean ie. city has no significane in the recovery of patients
* Ha : there is diffrence in the mean ie. city has significane in the recovery patients
* Significance (alpha) : 0.05
"""

from scipy import stats
data_group1 = df[df['city']=="mumbai"]['days']
data_group2 = df[df['city']=="bangalore"]['days']
t_stats,pvalue=stats.ttest_ind(data_group2,data_group1)
print("t_test statistics is :",t_stats)
print("p_value is :",pvalue)
if pvalue<0.05:
  print("Reject the Null Hypothisis ie there is diffrence in the mean ie. city has significane in the recovery patients")
else:
  print("Fail to reject null hypothisis ie there is no diffrence in the mean ie. city has no significane in the recovery of patients")

"""## Gender has any significant role or not in the recovery of Patient"""

sns.boxplot(data=df,x='gender',y="days")
plt.show()

"""look like the median of recovery for male and female are same ie there is no significant effect of gender to  stistically prooven the the statement let perform TTest

* H0 : there is no diffrence in the mean ie. Gender has no significane in the recovery of patients
* Ha : there is diffrence in the mean ie. Gender has significane in the recovery patients
* Significance (alpha) : 0.05
"""

data_group1 = df[df['gender']=="male"]['days']
data_group2 = df[df['gender']=="female"]['days']
t_stats,pvalue=stats.ttest_ind(data_group2,data_group1)
print("t_test statistics is :",t_stats)
print("p_value is :",pvalue)
if pvalue<0.05:
  print("Reject the Null Hypothisis ie there is diffrence in the mean ie. Gender has significane in the recovery patients")
else:
  print("Fail to reject null hypothisis ie there is no diffrence in the mean ie. Gender has no significane in the recovery of patients")

"""##Age,Bmi,Sleep has any significant role or not in the recovery of Patient

"""

plt.figure(figsize=(15,5))
num_cols=['age','bmi','sleep']
j=1
for i in num_cols:
  plt.subplot(1,3,j)
  sns.scatterplot(data=df, x='days', y=i)
  plt.title("{} vs days".format(i))
  j+=1

plt.show()

"""AS THE DATA NOT SEEMS TO BE LINEAR SO UE CAN'T USE PEARSON TEST SO WE NEED TO USE SPEARMAN RANK CORRELATION

* H0:Age,Bmi,Sleep are not corelated to number of days to recover a patients

* Ha: Age,Bmi,Sleep are  corelated to number of days to recover a patients

* SIGNIFICANCE (ALPHA) IS 0.05
"""

from scipy.stats import spearmanr
num_cols=['age','bmi','sleep']
for i in num_cols:
  a=df[i].values
  days=df["days"].values
  coef, p_value = spearmanr(a, days)
  print ("spearman rank correlation test for {} and recovery of patitents".format(i))
  print("spearman rank cofficent is :",coef)
  print("p value is :",p_value)
  if p_value<0.05:
    print("Reject null hypothisis ie {} and days of recovery of patitents  is correlated".format(i))
  else:
    print("Fail to reject null hypothisis {} and days of recovery of patitents  not correlated".format(i))
  print("*"*100)

sns.heatmap(df.corr(),annot=True)

"""## RECOMANDATION

* recover time depends upon(1) : age &city
* recovery time dosenot depend upon(0) : bmi,sleep & gender
"""